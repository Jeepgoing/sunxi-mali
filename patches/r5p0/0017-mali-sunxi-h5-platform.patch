diff -r -u r5p0/src/devicedrv/mali/platform/sunxi/sunxi.c r5p0/src/devicedrv/mali/platform/sunxi/sunxi.c
--- r5p0/src/devicedrv/mali/platform/sunxi/sunxi.c	2018-05-23 21:37:19.000000000 +0200
+++ r5p0/src/devicedrv/mali/platform/sunxi/sunxi.c	2018-05-23 18:26:39.000000000 +0200
@@ -81,10 +81,43 @@
 	return res;
 }
 
+struct resource *mali_create_mp4_resources(unsigned long address,
+					   int irq_gp, int irq_gpmmu,
+					   int irq_pp0, int irq_ppmmu0,
+					   int irq_pp1, int irq_ppmmu1,
+					   int irq_pp2, int irq_ppmmu2,
+					   int irq_pp3, int irq_ppmmu3,
+					   int irq_ppb,
+					   int *len)
+{
+	struct resource target[] = {
+		MALI_GPU_RESOURCES_MALI450_MP4(address,
+					       irq_gp, irq_gpmmu,
+					       irq_pp0, irq_ppmmu0,
+					       irq_pp1, irq_ppmmu1,
+					       irq_pp2, irq_ppmmu2,
+					       irq_pp3, irq_ppmmu3,
+					       irq_ppb
+					       )
+	};
+	struct resource *res;
+
+	res = kzalloc(sizeof(target), GFP_KERNEL);
+	if (!res)
+		return NULL;
+
+	memcpy(res, target, sizeof(target));
+
+	*len = ARRAY_SIZE(target);
+
+	return res;
+}
+
 static const struct of_device_id mali_dt_ids[] = {
 	{ .compatible = "allwinner,sun4i-a10-mali" },
 	{ .compatible = "allwinner,sun7i-a20-mali" },
 	{ .compatible = "arm,mali-400" },
+	{ .compatible = "arm,mali-450" },
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, mali_dt_ids);
@@ -98,6 +131,8 @@
 	int irq_gp, irq_gpmmu;
 	int irq_pp0, irq_ppmmu0;
 	int irq_pp1 = -EINVAL, irq_ppmmu1 = -EINVAL;
+	int irq_pp2 = -EINVAL, irq_ppmmu2 = -EINVAL;
+	int irq_pp3 = -EINVAL, irq_ppmmu3 = -EINVAL;
 	int irq_pmu;
 	struct resource *mali_res = NULL, res;
 	struct device_node *np;
@@ -128,7 +163,6 @@
 		ret = PTR_ERR(mali->bus_clk);
 		goto err_free_mem;
 	}
-	clk_prepare_enable(mali->bus_clk);
 
 	mali->core_clk = of_clk_get_by_name(np, "core");
 	if (IS_ERR(mali->core_clk)) {
@@ -136,10 +170,19 @@
 		ret = PTR_ERR(mali->core_clk);
 		goto err_put_bus;
 	}
-	clk_prepare_enable(mali->core_clk);
+
+	if (of_device_is_compatible(np, "allwinner,sun50i-h5-mali")) {
+	  //if (clk_set_rate(mali->bus_clk, 148500000)) { printk(KERN_DEBUG "clk_set_rate bus_clk failed\n"); }
+	  //if (clk_set_rate(mali->core_clk, 148500000)) printk(KERN_DEBUG "clk_set_rate core_clk failed\n");
+	  printk(KERN_DEBUG "mali_bus: %ld Hz - mali_core: %ld Hz\n", clk_get_rate(mali->bus_clk), clk_get_rate(mali->core_clk)); // 
+	}
+
+	if (clk_prepare_enable(mali->bus_clk)) { printk(KERN_DEBUG "clk_prepare_enable bus_clk failed\n"); }
+	if (clk_prepare_enable(mali->core_clk)) { printk(KERN_DEBUG "clk_prepare_enable core_clk failed\n"); }
 
 	if (of_device_is_compatible(np, "allwinner,sun4i-a10-mali") ||
-	    of_device_is_compatible(np, "allwinner,sun7i-a20-mali")) {
+	    of_device_is_compatible(np, "allwinner,sun7i-a20-mali") ||
+	    of_device_is_compatible(np, "allwinner,sun50i-h5-mali")) {
 		mali->reset = of_reset_control_get(np, NULL);
 		if (IS_ERR(mali->reset)) {
 			pr_err("Couldn't retrieve our reset handle\n");
@@ -191,6 +234,22 @@
 		goto err_put_reset;
 	}
 
+	irq_pp2 = of_irq_get_byname(np, "pp2");
+	irq_ppmmu2 = of_irq_get_byname(np, "ppmmu2");
+	if ((irq_pp2 < 0) ^ (irq_ppmmu2 < 0 )) {
+		pr_err("Couldn't retrieve our PP2 interrupts\n");
+		ret = (irq_pp2 < 0) ? irq_pp2 : irq_ppmmu2;
+		goto err_put_reset;
+	}
+
+	irq_pp3 = of_irq_get_byname(np, "pp3");
+	irq_ppmmu3 = of_irq_get_byname(np, "ppmmu3");
+	if ((irq_pp3 < 0) ^ (irq_ppmmu3 < 0 )) {
+		pr_err("Couldn't retrieve our PP3 interrupts\n");
+		ret = (irq_pp3 < 0) ? irq_pp3 : irq_ppmmu3;
+		goto err_put_reset;
+	}
+
 	irq_pmu = of_irq_get_byname(np, "pmu");
 	if (irq_pmu < 0) {
 		pr_err("Couldn't retrieve our PMU interrupt\n");
@@ -217,7 +276,16 @@
 		goto err_free_mem_region;
 	}
 
-	if ((irq_pp1 >= 0) && (irq_ppmmu1 >= 0))
+	if ((irq_pp3 >= 0) && (irq_ppmmu3 >= 0))
+	        mali_res = mali_create_mp4_resources(res.start,
+						     irq_gp, irq_gpmmu,
+						     irq_pp0, irq_ppmmu0,
+						     irq_pp1, irq_ppmmu1,
+						     irq_pp2, irq_ppmmu2,
+						     irq_pp3, irq_ppmmu3,
+						     of_irq_get_byname(np, "pp"),
+						     &len);
+	else if ((irq_pp1 >= 0) && (irq_ppmmu1 >= 0))
 		mali_res = mali_create_mp2_resources(res.start,
 						     irq_gp, irq_gpmmu,
 						     irq_pp0, irq_ppmmu0,
