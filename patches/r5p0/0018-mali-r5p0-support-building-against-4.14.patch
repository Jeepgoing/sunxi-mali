diff -r -u r5p0/src/devicedrv/mali/common/mali_control_timer.c r5p0/src/devicedrv/mali/common/mali_control_timer.c
--- r5p0/src/devicedrv/mali/common/mali_control_timer.c	2014-11-11 07:57:22.000000000 +0100
+++ r5p0/src/devicedrv/mali/common/mali_control_timer.c	2018-05-23 18:26:11.000000000 +0200
@@ -28,7 +28,7 @@
 	_mali_osk_timer_add(mali_control_timer, _mali_osk_time_mstoticks(timeout));
 }
 
-static void mali_control_timer_callback(void *arg)
+static void mali_control_timer_callback(struct timer_list *t)
 {
 	if (mali_utilization_enabled()) {
 		struct mali_gpu_utilization_data *util_data = NULL;
diff -r -u r5p0/src/devicedrv/mali/common/mali_group.c r5p0/src/devicedrv/mali/common/mali_group.c
--- r5p0/src/devicedrv/mali/common/mali_group.c	2014-11-11 07:57:22.000000000 +0100
+++ r5p0/src/devicedrv/mali/common/mali_group.c	2018-05-23 18:26:11.000000000 +0200
@@ -43,7 +43,7 @@
 static void mali_group_bottom_half_mmu(void *data);
 static void mali_group_bottom_half_gp(void *data);
 static void mali_group_bottom_half_pp(void *data);
-static void mali_group_timeout(void *data);
+static void mali_group_timeout(struct timer_list *t);
 
 static void mali_group_reset_pp(struct mali_group *group);
 static void mali_group_reset_mmu(struct mali_group *group);
@@ -1556,9 +1556,10 @@
 				      mali_pp_get_rawstat(group->pp_core), 0);
 }
 
-static void mali_group_timeout(void *data)
+static void mali_group_timeout(struct timer_list *t)
 {
-	struct mali_group *group = (struct mali_group *)data;
+        _mali_osk_timer_t *tim = container_of(t, _mali_osk_timer_t, timer);
+	struct mali_group *group = container_of(&tim, struct mali_group, timeout_timer);
 	MALI_DEBUG_ASSERT_POINTER(group);
 
 	MALI_DEBUG_PRINT(2, ("Group: timeout handler for %s at %u\n",
diff -r -u r5p0/src/devicedrv/mali/common/mali_osk_types.h r5p0/src/devicedrv/mali/common/mali_osk_types.h
--- r5p0/src/devicedrv/mali/common/mali_osk_types.h	2014-11-11 07:57:22.000000000 +0100
+++ r5p0/src/devicedrv/mali/common/mali_osk_types.h	2018-05-23 18:26:11.000000000 +0200
@@ -50,6 +50,7 @@
 #include <linux/types.h>
 #endif
 
+#include <linux/timer.h>
 /** @brief Mali Boolean type which uses MALI_TRUE and MALI_FALSE
   */
 typedef unsigned long mali_bool;
@@ -392,7 +393,11 @@
  * by any callers of _mali_osk_timer_del(). Otherwise, a deadlock may occur.
  *
  * @param arg Function-specific data */
-typedef void (*_mali_osk_timer_callback_t)(void *arg);
+typedef void (*_mali_osk_timer_callback_t)(struct timer_list *t);
+
+struct _mali_osk_timer_t_struct {
+  struct timer_list timer;
+};
 
 /** @brief Private type for Timer Callback Objects */
 typedef struct _mali_osk_timer_t_struct _mali_osk_timer_t;
diff -r -u r5p0/src/devicedrv/mali/linux/mali_kernel_linux.h r5p0/src/devicedrv/mali/linux/mali_kernel_linux.h
--- r5p0/src/devicedrv/mali/linux/mali_kernel_linux.h	2014-11-11 07:57:22.000000000 +0100
+++ r5p0/src/devicedrv/mali/linux/mali_kernel_linux.h	2018-05-23 18:26:11.000000000 +0200
@@ -16,11 +16,16 @@
 #endif
 
 #include <linux/cdev.h>     /* character device definitions */
+#include <linux/version.h>
 #include "mali_kernel_license.h"
 #include "mali_osk_types.h"
 
 extern struct platform_device *mali_platform_device;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 13, 0)
+#define __GFP_REPEAT __GFP_RETRY_MAYFAIL
+#endif
+
 #ifdef __cplusplus
 }
 #endif
diff -r -u r5p0/src/devicedrv/mali/linux/mali_memory.c r5p0/src/devicedrv/mali/linux/mali_memory.c
--- r5p0/src/devicedrv/mali/linux/mali_memory.c	2014-11-11 07:57:22.000000000 +0100
+++ r5p0/src/devicedrv/mali/linux/mali_memory.c	2018-05-23 18:26:11.000000000 +0200
@@ -109,12 +109,23 @@
 	mali_mem_descriptor_destroy(descriptor);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+static int mali_kernel_memory_cpu_page_fault_handler(struct vm_fault *vmf)
+#else
 static int mali_kernel_memory_cpu_page_fault_handler(struct vm_area_struct *vma, struct vm_fault *vmf)
+#endif
 {
-	void __user *address;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+        struct vm_area_struct *vma = vmf->vma;
+#endif
 	mali_mem_allocation *descriptor;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)
+	unsigned long address = vmf->address;
+#else
+	void __user *address;
 	address = vmf->virtual_address;
+#endif /*LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)*/
 	descriptor = (mali_mem_allocation *)vma->vm_private_data;
 
 	MALI_DEBUG_ASSERT(MALI_MEM_ALLOCATION_VALID_MAGIC == descriptor->magic);
diff -r -u r5p0/src/devicedrv/mali/linux/mali_memory_os_alloc.c r5p0/src/devicedrv/mali/linux/mali_memory_os_alloc.c
--- r5p0/src/devicedrv/mali/linux/mali_memory_os_alloc.c	2018-05-23 21:37:19.000000000 +0200
+++ r5p0/src/devicedrv/mali/linux/mali_memory_os_alloc.c	2018-05-23 18:26:11.000000000 +0200
@@ -149,7 +149,7 @@
 	/* Allocate new pages, if needed. */
 	for (i = 0; i < remaining; i++) {
 		dma_addr_t dma_addr;
-		gfp_t flags = __GFP_ZERO | __GFP_REPEAT | __GFP_NOWARN | __GFP_COLD;
+		gfp_t flags = __GFP_ZERO | __GFP_REPEAT | __GFP_NOWARN;
 		int err;
 
 #if defined(CONFIG_ARM) && !defined(CONFIG_ARM_LPAE)
diff -r -u r5p0/src/devicedrv/mali/linux/mali_osk_timers.c r5p0/src/devicedrv/mali/linux/mali_osk_timers.c
--- r5p0/src/devicedrv/mali/linux/mali_osk_timers.c	2014-11-11 07:57:22.000000000 +0100
+++ r5p0/src/devicedrv/mali/linux/mali_osk_timers.c	2018-05-23 18:26:11.000000000 +0200
@@ -18,16 +18,25 @@
 #include "mali_osk.h"
 #include "mali_kernel_common.h"
 
-struct _mali_osk_timer_t_struct {
-	struct timer_list timer;
-};
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 14, 0)
+
+#define TIMER_DATA_TYPE		unsigned long
+#define TIMER_FUNC_TYPE		void (*)(TIMER_DATA_TYPE)
+
+static inline void timer_setup(struct timer_list *timer,
+			       void (*callback)(struct time_setup *),
+			       unsigned int flags)
+{
+	__setup_timer(timer, (TIMER_FUNC_TYPE)callback,
+		      (TIMER_DATA_TYPE)timer, flags);
+}
+#endif
 
 typedef void (*timer_timeout_function_t)(unsigned long);
 
 _mali_osk_timer_t *_mali_osk_timer_init(void)
 {
 	_mali_osk_timer_t *t = (_mali_osk_timer_t *)kmalloc(sizeof(_mali_osk_timer_t), GFP_KERNEL);
-	if (NULL != t) init_timer(&t->timer);
 	return t;
 }
 
@@ -65,8 +74,7 @@
 void _mali_osk_timer_setcallback(_mali_osk_timer_t *tim, _mali_osk_timer_callback_t callback, void *data)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	tim->timer.data = (unsigned long)data;
-	tim->timer.function = (timer_timeout_function_t)callback;
+	timer_setup(&tim->timer, callback, 0);
 }
 
 void _mali_osk_timer_term(_mali_osk_timer_t *tim)
